#[derive(Debug, Clone, Default)]
pub struct {{ target_kind_name }} {
{% for field in fields -%}
         {{ field.name | snake | indent(first = true) }}: {{ field.value }},
{% endfor %}
}

impl {{ target_kind_name }} {
    pub fn new({% for field in fields | sort(attribute="name") -%}{{ field.name | snake }}: {{ field.value }},{% endfor %}) -> Self {
        Self {
            {% for field in fields -%}
            {{ field.name | snake }},
            {% endfor %}
        }
    }


    {% for field in fields -%}pub fn {{ field.name | snake }}(&self) -> &{{ field.value }} {
        &self.{{ field.name | snake }}
    }
    {% endfor %}


    pub fn read_from<'top, D: LazyDecoder>(value: ValueRef<'top, D>) -> IonResult<Self> {
        let mut abstract_data_type = {{ target_kind_name }}::default();
        {% if abstract_data_type == "Value"%}
            abstract_data_type.value = {% if fields[0].value | is_built_in_type == false %}
                                            {{ fields[0].value }}::read_from(value.get_expected("{{ field.name }}")?)?;
                                        {% else %}
                                           {
                                                value.expect_{% if fields[0].isl_type_name == "symbol" %}symbol()?.text().unwrap(){% else %}{{ fields[0].value | lower | replace(from="string", to="text")}}()?{% endif %}{% if fields[0].value | lower == "string" %} .to_string() {% endif %}
                                           };
                                        {% endif %}
        {% elif abstract_data_type is object and abstract_data_type is containing("Structure") %}
            let struct_value = value.expect_struct()?;
            {% for field in fields -%}
                {% if field.value | is_built_in_type == false %}
                    abstract_data_type.{{ field.name | snake }} = {{ field.value }}::read_from(struct_value.get_expected("{{ field.name }}")?)?;
                {% else %}
                    abstract_data_type.{{ field.name | snake }} = struct_value.get_expected("{{ field.name }}")?.expect_{% if field.isl_type_name == "symbol" %}symbol()?.text().unwrap(){% else %}{{ field.value | lower | replace(from="string", to="text") }}()?{% endif %}{% if field.value | lower== "string" %} .to_string() {% endif %};
                {% endif %}
            {% endfor %}
        {% elif abstract_data_type is object and abstract_data_type is containing("Sequence")  %}
             let sequence_value = value.expect_list()?;
             abstract_data_type.value = {
                 let mut values = vec![];
                 for element in sequence_value.iter() {
                    {% if abstract_data_type["Sequence"] | is_built_in_type == false %}
                        values.push({{ abstract_data_type["Sequence"] }}::read_from(element?.read()?)?);
                    {% else %}
                        values.push(element?.read()?.expect_{% if fields[0].isl_type_name == "symbol" %}symbol()?.text().unwrap(){% else %}{{ abstract_data_type["Sequence"] | lower | replace(from="string", to ="text") }}()?{% endif %}{% if abstract_data_type["Sequence"] | lower== "string" %} .to_string() {% endif %});
                    {% endif %}
                }
                values
             };
        {% else %}
            return IonResult::decoding_error("Can not resolve read API template for {{ target_kind_name }}");
        {% endif %}
        Ok(abstract_data_type)
    }
}


impl WriteAsIon for {{ target_kind_name }} {
    fn write_as_ion<V: ValueWriter>(&self, writer: V) -> IonResult<()> {
         {% if abstract_data_type == "Value" %}
            {% for field in fields %}
                {% if field.value | is_built_in_type == false  %}
                    self.{{ field.name | snake }}.write_as_ion(writer)?;
                {% else %}
                    writer.write_{% if field.isl_type_name == "symbol" %}symbol{% else %}{{ field.value | lower }}{% endif %}(self.value)?;
                {% endif %}
            {% endfor %}
        {% elif abstract_data_type is object and abstract_data_type is containing("Structure") %}
            let mut strukt = writer.struct_writer()?;
            {% for field in fields %}
                {% if field.value | is_built_in_type == false %}
                    strukt.write("{{ field.name }}", self.{{ field.name | snake }}.to_owned());
                {% else %}
                    {# TODO: Change the following `to_owned` to only be used when writing i64,f32,f64,bool which require owned value as input #}
                    strukt.write("{{ field.name }}", self.{{ field.name | snake }}.to_owned())?;
                {% endif %}
            {% endfor %}
            strukt.close()?;
        {% elif abstract_data_type is object and abstract_data_type is containing("Sequence")  %}
           let mut list = writer.list_writer()?;
            for value in &self.value {
                {% if abstract_data_type["Sequence"] | is_built_in_type  == false %}
                    value.write_as_ion(writer)?;
                {% else %}
                   list.write(value.to_owned())?;
                {% endif %}
            }
             list.close()?;
        {% endif %}
        Ok(())
    }
}

